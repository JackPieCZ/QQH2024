from io import BytesIO
import torch
import base64
from torch import nn
# Load the model or state_dict
model_or_state_dict = torch.load(
    "D:/_FEL/QQH2024/testing/kuba/best_model_epoch.pth")

# If it's an OrderedDict (state_dict), save it directly
if isinstance(model_or_state_dict, dict):
    torch.save(model_or_state_dict, 'D:/_FEL/QQH2024/testing/kuba/best_model_epoch.pt',
               _use_new_zipfile_serialization=False)
else:
    # If it's a full model, save its state_dict
    torch.save(model_or_state_dict.state_dict(
    ), 'D:/_FEL/QQH2024/testing/kuba/best_model_epoch.pt', _use_new_zipfile_serialization=False)

# Encode the saved weights to Base64
with open('D:/_FEL/QQH2024/testing/kuba/best_model_epoch.pt', 'rb') as f:
    encoded = base64.b64encode(f.read()).decode('utf-8')

print(encoded)  # Copy this output into your .py file

# fmt: off
base64_str = ""
# fmt: on
print(encoded == base64_str)
# Decode the Base64 string
decoded = base64.b64decode(encoded)

# Create a buffer from the decoded bytes
buffer = BytesIO(decoded)

# Load the state_dict from the buffer
state_dict = torch.load(buffer, weights_only=True)


class ResidualBlock(nn.Module):
    def __init__(self, input_size, output_size, dropout=0.4):
        super(ResidualBlock, self).__init__()
        self.fc = nn.Sequential(
            nn.Linear(input_size, output_size),
            nn.LeakyReLU(negative_slope=0.01),  # Replace ReLU with LeakyReLU
            nn.BatchNorm1d(output_size),
            nn.Dropout(dropout)
        )
        # Shortcut for residual connection
        self.shortcut = nn.Linear(input_size, output_size)

    def forward(self, x):
        return self.fc(x) + self.shortcut(x)


class Net(nn.Module):
    def __init__(self, input_size):
        super(Net, self).__init__()
        self.block1 = ResidualBlock(input_size, 512, dropout=0.4)
        self.block2 = ResidualBlock(512, 256, dropout=0.4)
        self.block3 = ResidualBlock(256, 128, dropout=0.3)
        self.block4 = ResidualBlock(128, 64, dropout=0.3)  # New block
        self.fc = nn.Sequential(
            nn.Linear(64, 32),
            nn.SiLU(),  # Swish activation
            nn.BatchNorm1d(32),
            nn.Linear(32, 1),
            nn.Sigmoid()
        )

    def forward(self, x):
        x = x.view(1, -1)
        x = self.block1(x)
        x = self.block2(x)
        x = self.block3(x)
        x = self.block4(x)
        return self.fc(x)


# Initialize your model
model = Net(393)

# Load the state_dict into the model
model.load_state_dict(state_dict)

# The model is now ready for use
model.eval()  # Set to evaluation mode if you are using it for inference
